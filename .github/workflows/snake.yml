name: generate animation

env:
  DEFAULT_MODE: "auto-hour"

on:
  # run automatically every 24 hours
  schedule:
    - cron: "0 * * * *"
    # - cron: "0 16 * * *"

  # allows to manually run the job at any time
  workflow_dispatch:
    inputs:
      mode:
        description: "Color change mode"
        required: false
        type: choice
        options:
          - "auto-day"
          - "auto-hour"
          - "manual"
        default: "auto-hour"
      style:
        description: "Manual color style (仅在手动模式下使用，选择 day 或 hour 的具体样式)"
        required: false
        type: choice
        options:
          - day1-海洋-深海
          - day2-火焰-熔岩
          - day3-森林-丛林
          - day4-科技-赛博
          - day5-晨曦-琥珀
          - day6-樱花-玫瑰
          - day7-暮色-咖啡
          - hour1-深夜紫
          - hour2-午夜蓝
          - hour3-寂静靛
          - hour4-凌晨灰
          - hour5-黎明粉
          - hour6-晨曦橙
          - hour7-日出金
          - hour8-清晨黄
          - hour9-上午绿
          - hour10-活力青
          - hour11-正午蓝
          - hour12-天空青
          - hour13-午后蓝
          - hour14-温暖橙
          - hour15-夕阳红
          - hour16-黄昏紫
          - hour17-暮色玫
          - hour18-傍晚紫
          - hour19-入夜靛
          - hour20-夜幕蓝
          - hour21-深夜青
          - hour22-午夜紫
          - hour23-子夜墨
          - hour24-静夜灰
        default: ""

  # run on every push on the master branch
  push:
    branches:
      - master

jobs:
  generate:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect GitHub Holiday Colors
        id: holiday
        uses: diverger/gh-contribution-calendar-theme@v1
        with:
          github-username: ${{ github.repository_owner }}
          timezone: 'Asia/Shanghai'

      - name: Set color scheme by China time
        id: colors
        shell: python
        env:
          MODE: ${{ github.event.inputs.mode || env.DEFAULT_MODE }}
          MANUAL_STYLE: ${{ github.event.inputs.style || '' }}
          HOLIDAY_DETECTED: ${{ steps.holiday.outputs.holiday_detected }}
          HOLIDAY_THEME_NAME: ${{ steps.holiday.outputs.theme_name }}
          HOLIDAY_LIGHT_COLORS: ${{ steps.holiday.outputs.light_color_palette }}
          HOLIDAY_DARK_COLORS: ${{ steps.holiday.outputs.dark_color_palette }}
          LIGHT_SCHEMAS_DAY: |
            [
              {"style":"海洋","snake":"#0277BD","dots":["#E1F5FE","#81D4FA","#4FC3F7","#29B6F6","#039BE5"]},
              {"style":"火焰","snake":"#E64A19","dots":["#FBE9E7","#FFAB91","#FF8A65","#FF7043","#FF5722"]},
              {"style":"森林","snake":"#28a745","dots":["#E8F5E9","#9be9a8","#40c463","#30a14e","#216e39"]},
              {"style":"科技","snake":"#5E35B1","dots":["#EDE7F6","#B39DDB","#9575CD","#7E57C2","#673AB7"]},
              {"style":"晨曦","snake":"#F57C00","dots":["#FFF8E1","#FFD54F","#FFCA28","#FFA000","#FF8F00"]},
              {"style":"樱花","snake":"#D81B60","dots":["#FCE4EC","#F48FB1","#F06292","#EC407A","#E91E63"]},
              {"style":"暮色","snake":"#5D4037","dots":["#EFEBE9","#BCAAA4","#A1887F","#8D6E63","#6D4C41"]}
            ]
          DARK_SCHEMAS_DAY: |
            [
              {"style":"深海","snake":"#00BCD4","dots":["#151b23","#004D56","#006B75","#00897B","#26C6DA"]},
              {"style":"熔岩","snake":"#FF6E40","dots":["#151b23","#5D1F0C","#8D2F10","#D84315","#FF7043"]},
              {"style":"丛林","snake":"#3FB950","dots":["#151b23","#033A16","#196C2E","#2EA043","#56D364"]},
              {"style":"赛博","snake":"#7C4DFF","dots":["#151b23","#311B92","#4527A0","#5E35B1","#9575CD"]},
              {"style":"琥珀","snake":"#FFB74D","dots":["#151b23","#E65100","#F57C00","#FF9800","#FFCA28"]},
              {"style":"玫瑰","snake":"#F06292","dots":["#151b23","#4A1229","#880E4F","#C2185B","#EC407A"]},
              {"style":"咖啡","snake":"#8D6E63","dots":["#151b23","#321911","#4E342E","#6D4C41","#A1887F"]}
            ]
          LIGHT_SCHEMAS_HOUR: |
            [
              {"style":"深夜紫","snake":"#4A148C","dots":["#EDE7F6","#B39DDB","#9575CD","#7E57C2","#673AB7"]},
              {"style":"午夜蓝","snake":"#01579B","dots":["#E1F5FE","#81D4FA","#4FC3F7","#29B6F6","#039BE5"]},
              {"style":"寂静靛","snake":"#1A237E","dots":["#E8EAF6","#9FA8DA","#7986CB","#5C6BC0","#3F51B5"]},
              {"style":"凌晨灰","snake":"#37474F","dots":["#ECEFF1","#B0BEC5","#90A4AE","#78909C","#607D8B"]},
              {"style":"黎明粉","snake":"#AD1457","dots":["#FCE4EC","#F8BBD0","#F48FB1","#F06292","#EC407A"]},
              {"style":"晨曦橙","snake":"#E64A19","dots":["#FBE9E7","#FFCCBC","#FFAB91","#FF8A65","#FF7043"]},
              {"style":"日出金","snake":"#F57F17","dots":["#FFF8E1","#FFECB3","#FFE082","#FFD54F","#FFCA28"]},
              {"style":"清晨黄","snake":"#F9A825","dots":["#FFFDE7","#FFF9C4","#FFF59D","#FFF176","#FFEE58"]},
              {"style":"上午绿","snake":"#388E3C","dots":["#E8F5E9","#C8E6C9","#A5D6A7","#81C784","#66BB6A"]},
              {"style":"活力青","snake":"#00897B","dots":["#E0F2F1","#B2DFDB","#80CBC4","#4DB6AC","#26A69A"]},
              {"style":"正午蓝","snake":"#0277BD","dots":["#E1F5FE","#B3E5FC","#81D4FA","#4FC3F7","#29B6F6"]},
              {"style":"天空青","snake":"#0097A7","dots":["#E0F7FA","#B2EBF2","#80DEEA","#4DD0E1","#26C6DA"]},
              {"style":"午后蓝","snake":"#1976D2","dots":["#E3F2FD","#BBDEFB","#90CAF9","#64B5F6","#42A5F5"]},
              {"style":"温暖橙","snake":"#F57C00","dots":["#FFF3E0","#FFE0B2","#FFCC80","#FFB74D","#FFA726"]},
              {"style":"夕阳红","snake":"#D84315","dots":["#FBE9E7","#FFCCBC","#FFAB91","#FF8A65","#FF7043"]},
              {"style":"黄昏紫","snake":"#7B1FA2","dots":["#F3E5F5","#E1BEE7","#CE93D8","#BA68C8","#AB47BC"]},
              {"style":"暮色玫","snake":"#C2185B","dots":["#FCE4EC","#F8BBD0","#F48FB1","#F06292","#EC407A"]},
              {"style":"傍晚紫","snake":"#512DA8","dots":["#EDE7F6","#D1C4E9","#B39DDB","#9575CD","#7E57C2"]},
              {"style":"入夜靛","snake":"#303F9F","dots":["#E8EAF6","#C5CAE9","#9FA8DA","#7986CB","#5C6BC0"]},
              {"style":"夜幕蓝","snake":"#1565C0","dots":["#E3F2FD","#BBDEFB","#90CAF9","#64B5F6","#42A5F5"]},
              {"style":"深夜青","snake":"#00695C","dots":["#E0F2F1","#B2DFDB","#80CBC4","#4DB6AC","#26A69A"]},
              {"style":"午夜紫","snake":"#6A1B9A","dots":["#F3E5F5","#E1BEE7","#CE93D8","#BA68C8","#AB47BC"]},
              {"style":"子夜墨","snake":"#263238","dots":["#ECEFF1","#CFD8DC","#B0BEC5","#90A4AE","#78909C"]},
              {"style":"静夜灰","snake":"#424242","dots":["#FAFAFA","#E0E0E0","#BDBDBD","#9E9E9E","#757575"]}
            ]
          DARK_SCHEMAS_HOUR: |
            [
              {"style":"深夜紫","snake":"#B388FF","dots":["#151b23","#4A148C","#6A1B9A","#7B1FA2","#8E24AA"]},
              {"style":"午夜蓝","snake":"#40C4FF","dots":["#151b23","#01579B","#0277BD","#0288D1","#039BE5"]},
              {"style":"寂静靛","snake":"#536DFE","dots":["#151b23","#1A237E","#283593","#303F9F","#3949AB"]},
              {"style":"凌晨灰","snake":"#78909C","dots":["#151b23","#37474F","#455A64","#546E7A","#607D8B"]},
              {"style":"黎明粉","snake":"#FF4081","dots":["#151b23","#880E4F","#AD1457","#C2185B","#D81B60"]},
              {"style":"晨曦橙","snake":"#FF6E40","dots":["#151b23","#BF360C","#D84315","#E64A19","#F4511E"]},
              {"style":"日出金","snake":"#FFD740","dots":["#151b23","#F57F17","#F9A825","#FBC02D","#FDD835"]},
              {"style":"清晨黄","snake":"#FFEA00","dots":["#151b23","#F57F17","#F9A825","#FBC02D","#FDD835"]},
              {"style":"上午绿","snake":"#69F0AE","dots":["#151b23","#1B5E20","#2E7D32","#388E3C","#43A047"]},
              {"style":"活力青","snake":"#64FFDA","dots":["#151b23","#004D40","#00695C","#00796B","#00897B"]},
              {"style":"正午蓝","snake":"#40C4FF","dots":["#151b23","#01579B","#0277BD","#0288D1","#03A9F4"]},
              {"style":"天空青","snake":"#18FFFF","dots":["#151b23","#006064","#00838F","#0097A7","#00BCD4"]},
              {"style":"午后蓝","snake":"#448AFF","dots":["#151b23","#0D47A1","#1565C0","#1976D2","#2196F3"]},
              {"style":"温暖橙","snake":"#FFAB40","dots":["#151b23","#E65100","#EF6C00","#F57C00","#FB8C00"]},
              {"style":"夕阳红","snake":"#FF6E40","dots":["#151b23","#BF360C","#D84315","#E64A19","#FF5722"]},
              {"style":"黄昏紫","snake":"#E040FB","dots":["#151b23","#4A148C","#6A1B9A","#8E24AA","#9C27B0"]},
              {"style":"暮色玫","snake":"#F50057","dots":["#151b23","#880E4F","#AD1457","#C2185B","#E91E63"]},
              {"style":"傍晚紫","snake":"#B388FF","dots":["#151b23","#311B92","#4527A0","#512DA8","#673AB7"]},
              {"style":"入夜靛","snake":"#7C4DFF","dots":["#151b23","#1A237E","#283593","#303F9F","#3F51B5"]},
              {"style":"夜幕蓝","snake":"#448AFF","dots":["#151b23","#0D47A1","#1565C0","#1976D2","#2196F3"]},
              {"style":"深夜青","snake":"#1DE9B6","dots":["#151b23","#004D40","#00695C","#00796B","#009688"]},
              {"style":"午夜紫","snake":"#E040FB","dots":["#151b23","#4A148C","#6A1B9A","#8E24AA","#AB47BC"]},
              {"style":"子夜墨","snake":"#607D8B","dots":["#151b23","#263238","#37474F","#455A64","#546E7A"]},
              {"style":"静夜灰","snake":"#9E9E9E","dots":["#151b23","#424242","#616161","#757575","#BDBDBD"]}
            ]
        run: |
          import os, json
          from datetime import datetime
          from zoneinfo import ZoneInfo

          mode = os.environ.get('MODE', 'auto-hour')
          manual_style = os.environ.get('MANUAL_STYLE', '')
          now_china = datetime.now(ZoneInfo('Asia/Shanghai'))

          # Check if holiday theme is detected
          holiday_detected = os.environ.get('HOLIDAY_DETECTED', 'false').lower() == 'true'

          theme_icon = ''
          theme_name = ''

          if holiday_detected:
              # Use holiday colors directly from GitHub
              print("🎉 Using detected holiday theme!")
              theme_name = os.environ.get('HOLIDAY_THEME_NAME', 'unknown')
              print(f"Theme: {theme_name}")

              match theme_name:
                case 'halloween':
                  theme_icon = '🎃 '
                case 'christmas':
                  theme_icon = '🎄 '
                case 'new_year':
                  theme_icon = '🎉 '
                case 'easter':
                  theme_icon = '🐣 '
                case 'valentines':
                  theme_icon = '❤️ '

              # Get the color palettes directly
              light_colors_str = os.environ.get('HOLIDAY_LIGHT_COLORS', '')
              dark_colors_str = os.environ.get('HOLIDAY_DARK_COLORS', '')

              if light_colors_str and dark_colors_str:
                  # Split the color palette strings
                  light_grid_colors = [c.strip() for c in light_colors_str.split(',')]
                  dark_grid_colors = [c.strip() for c in dark_colors_str.split(',')]

                  if len(light_grid_colors) >= 5 and len(dark_grid_colors) >= 5:
                      # Use level 3 for snake (good contrast)
                      light_snake = light_grid_colors[3]
                      # Use all colors for dots
                      light_dots = ', '.join(light_grid_colors)

                      # Use level 4 for snake (brightest for dark mode)
                      dark_snake = dark_grid_colors[4]
                      # Use all colors for dots
                      dark_dots = ', '.join(dark_grid_colors)

                      print(f"Light snake: {light_snake}, dots: {light_dots}")
                      print(f"Dark snake: {dark_snake}, dots: {dark_dots}")
                  else:
                      # Fallback
                      print(f"⚠️  Not enough colors, using defaults")
                      light_snake = light_grid_colors[0] if light_grid_colors else '#40c463'
                      dark_snake = dark_grid_colors[0] if dark_grid_colors else '#39d353'
                      light_dots = light_colors_str or '#ebedf0, #9be9a8, #40c463, #30a14e, #216e39'
                      dark_dots = dark_colors_str or '#161b22, #0e4429, #006d32, #26a641, #39d353'
              else:
                  # Fallback
                  print("⚠️  No colors found, using defaults")
                  light_snake = '#40c463'
                  dark_snake = '#39d353'
                  light_dots = '#ebedf0, #9be9a8, #40c463, #30a14e, #216e39'
                  dark_dots = '#161b22, #0e4429, #006d32, #26a641, #39d353'
          else:
              # Use custom color schemes
              print("Using custom color schemes")

              # Determine which mode to use
              if mode == 'manual':
                  if not manual_style:
                      # Manual mode requires style to be selected
                      print("⚠️  Warning: Manual mode selected but no style specified, falling back to auto-hour mode")
                      mode = 'auto-hour'
                  else:
                      # Manual mode: user specifies the style string, e.g. day1-海洋-深海 or hour1-深夜紫
                      if manual_style.startswith('day'):
                          # dayN-xxx-yyy
                          idx = int(manual_style[3:].split('-')[0]) - 1  # day1 -> 0
                          light = json.loads(os.environ['LIGHT_SCHEMAS_DAY'])
                          dark = json.loads(os.environ['DARK_SCHEMAS_DAY'])
                      elif manual_style.startswith('hour'):
                          # hourN-xxx
                          idx = int(manual_style[4:].split('-')[0]) - 1  # hour1 -> 0
                          light = json.loads(os.environ['LIGHT_SCHEMAS_HOUR'])
                          dark = json.loads(os.environ['DARK_SCHEMAS_HOUR'])
                      else:
                          raise ValueError('Invalid style format, must start with day or hour')

              if mode == 'auto-hour':
                  # Hour mode: 24 color schemes based on hour
                  idx = now_china.hour  # 0-23
                  light = json.loads(os.environ['LIGHT_SCHEMAS_HOUR'])
                  dark = json.loads(os.environ['DARK_SCHEMAS_HOUR'])
              elif mode == 'auto-day':
                  # Day mode: 7 color schemes based on weekday
                  idx = now_china.weekday()  # 0=Monday, 6=Sunday
                  light = json.loads(os.environ['LIGHT_SCHEMAS_DAY'])
                  dark = json.loads(os.environ['DARK_SCHEMAS_DAY'])

              entry_light = light[idx]
              entry_dark = dark[idx]

              light_snake = entry_light['snake'].strip()
              dark_snake = entry_dark['snake'].strip()
              light_dots = ', '.join([d.strip() for d in entry_light['dots']])
              dark_dots = ', '.join([d.strip() for d in entry_dark['dots']])

          out = os.environ.get('GITHUB_OUTPUT')
          if out:
              with open(out, 'a') as f:
                  f.write(f"light_color={light_snake}\n")
                  f.write(f"dark_color={dark_snake}\n")
                  f.write(f"light_dots={light_dots}\n")
                  f.write(f"dark_dots={dark_dots}\n")
                  if holiday_detected:
                      f.write(f"theme_icon={theme_icon}\n")
                      f.write(f"theme_name={theme_name}\n")

      - name: Generate GitHub Contributions Snake Animations
        uses: diverger/gh-magic-matrix/snake@main
        with:
          github_user_name: ${{ github.repository_owner }}
          show_contribution_counter: true
          hide_progress_bar: true
          counter_displays: |
            [
              {
                "position": "bottom-left",
                "text": "©diverger",
                "color": "#1f883d",
                "fontSize": 14,
                "fontWeight": "bold"
              },
              {
                "position": "top-right",
                "prefix": ${{ steps.colors.outputs.theme_name && format('Happy{0} ', steps.colors.outputs.theme_icon) || '' }},
                "suffix": " killed",
                "showCount": true,
                "showPercentage": false,
                "color": "#bf3989",
                "fontStyle": "bold"
              },
              {
                "position": "follow",
                "mode": "level",
                "prefix": "{img:0} ",
                "suffix": "",
                "showCount": false,
                "showPercentage": false,
                "fontSize": 14,
                "images": [
                  {
                    "urlFolder": ".github/assets",
                    "framePattern": "Lx.png",
                    "width": 64,
                    "height": 86,
                    "anchorY": 0.6875,
                    "anchorX": 0.3,
                    "textAnchorY": 1.0,
                    "spacing": 0,
                    "sprite": {
                      "contributionLevels": 5,
                      "framesPerLevel": 8,
                      "frameWidth": 48,
                      "frameHeight": 64,
                      "layout": "horizontal",
                      "useSpriteSheetPerLevel": true
                    }
                  }
                ]
              }
            ]
          outputs: |
            dist/github-snake-dark.svg?color_snake=${{ steps.colors.outputs.dark_color }}&color_dots=${{ steps.colors.outputs.dark_dots }}
            dist/github-snake.svg?color_snake=${{ steps.colors.outputs.light_color }}&color_dots=${{ steps.colors.outputs.light_dots }}

      # push the content of <build_dir> to a branch
      # the content will be available at https://raw.githubusercontent.com/<github_user>/<repository>/<target_branch>/<file> , or as github page
      - name: push github-snake.svg to the output branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: output
          commit_message: "Update snake animation [skip ci]"
